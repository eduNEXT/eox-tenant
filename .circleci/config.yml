# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details.
#

version: 2.1
workflows:
  version: 2.1
  test:
    jobs:
      - test:
          filters:
            tags:
              only: /v?[0-9]+(\.[0-9]+)*/
          matrix:
            parameters:
              python_version: ["3.5", "3.8"]
              debian_version: ["stretch", "buster"]
            exclude:
              - python_version: "3.5"
                debian_version: "buster"
              - python_version: "3.8"
                debian_version: "stretch"

      - pypi:
          requires:
            - test
          filters:
            tags:
              only: /v?[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/

jobs:
  test:
    parameters:
      django_version:
        type: string
        default: django22
      python_version:
        type: string
      debian_version:
        type: string
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:<< parameters.python_version >>-<< parameters.debian_version >>

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo<< parameters.python_version >>

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-<< parameters.python_version >>-<< parameters.django_version >>-dependencies-{{ checksum "requirements/test.txt" }}
      - run:
          name: Install dependencies.
          command: |
            test -d venv || virtualenv venv
            . venv/bin/activate
            pip install -r requirements/tox.txt

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            export TOXENV=${TOX_ENV//./}
            make run-tests

      - save_cache:
          paths:
            - ./.tox
            - ./node_modules
          key: v2-<< parameters.python_version >>-<< parameters.django_version >>-dependencies-{{ checksum "requirements/test.txt" }}

    environment:
      - TOX_ENV: py<< parameters.python_version >>-<< parameters.django_version >>
      
  pypi:
    docker:
      - image: circleci/python:3.5
    steps:
      - checkout
      - run:
          name: Init .pypirc
          command: |
            echo $'[distutils]\nindex-servers = pypi\n[pypi]' > ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Prepare venv for distribution
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install twine
      - run:
          name: Create package
          command: |
            python setup.py sdist bdist_wheel
      - run:
          name: Check package
          command: |
            source venv/bin/activate
            twine check dist/*
      - run:
          name: Upload to pypi
          command: |
            source venv/bin/activate
            twine upload dist/*
